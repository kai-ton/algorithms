std::vector<std::vector<int>> Matrix_to_List (std::vector<std::vector<int>> Matrix) {
    // принимает матрицу смежности и возвращает список смежности (детей)
    std::vector<std::vector<int>> List(Matrix.size());
    for (int i = 0; i < Matrix.size(); i++) {
        for (int j = 0; j < Matrix[i].size(); j++) {
            if (Matrix[i][j] != 0) {
                List[i].push_back(j);
            }
        }
    }
    return List;
}

-----------

std::vector<std::vector<std::pair<long long, long long>>> Matrix_to_DisList (std::vector<std::vector<long long>> Matrix) {
    // создаем список смежности с расстояниями на основе матрицы смежности
    std::vector<std::vector<std::pair<long long, long long>>> DisList(Matrix.size());
    for (int i = 0; i < Matrix.size(); i++) {
        for (int j = 0; j < Matrix[i].size(); j++) {
            if (Matrix[i][j] != 0 && Matrix[i][j] != -1) {  // 0 или -1 по условию задачи - отсутствие ребра
                DisList[i].push_back({j, Matrix[i][j]});
            }
        }
    }
    return DisList;
}


-------------------------------------------------------------------------------

void DFS (int Punkt, std::vector<int>& Metka, std::vector<std::vector<int>>& Sosede) {
    Metka[Punkt] = 1;
    for (int i = 0; i < Sosede[Punkt].size(); i++) {
        if (Metka[Sosede[Punkt][i]] == 0) {
            DFS(Sosede[Punkt][i], Metka, Sosede);
        }
    }
}

-----------

// для задачи с восстановлением пути
void BFS (int Punkt, std::vector<int>& Rasstoyanie /*изначально -1*/,
           std::vector<std::vector<int>>& Sosede, std::vector<int>& Roditeli) {
    std::queue<int> Queue;
    int roditel;
    Queue.push(Punkt);
    Rasstoyanie[Punkt] = 0;
    while (Queue.size() > 0) {
        roditel = Queue.front();
        Queue.pop();
        for (int i = 0; i < Sosede[roditel].size(); i++) {
            if (Rasstoyanie[Sosede[roditel][i]] == -1) {
                Queue.push(Sosede[roditel][i]);
                Rasstoyanie[Sosede[roditel][i]] = Rasstoyanie[roditel] + 1;
                Roditeli[Sosede[roditel][i]] = roditel;
            }
        }
    }
}

-----------

void Dijkstra (std::vector<std::vector<std::pair<long long, long long>>> DistList,
                int Start, int Finish, std::vector<long long>& dist) {
    // алгоритм Дейкстры
    std::set<std::pair<long long, long long>> DistSet;  // множество для сортировки по расстояниям
    long long Vershina;
    dist[Start] = 0;
    DistSet.insert({dist[Start], Start});  // first - текущее расстояние до вершины, second - номер вершины
    while (!DistSet.empty()) {
        Vershina = DistSet.begin()->second;
        DistSet.erase(DistSet.begin());
        for (int i = 0; i < DistList[Vershina].size(); i++) {
            // проверяем уменьшается ли расстояние до соседней вершины
            if (dist[DistList[Vershina][i].first] > dist[Vershina] + DistList[Vershina][i].second) {
                // убираем из множества старую пару и погружаем новую
                DistSet.erase({dist[DistList[Vershina][i].first], DistList[Vershina][i].first});
                dist[DistList[Vershina][i].first] = dist[Vershina] + DistList[Vershina][i].second;
                DistSet.insert({dist[DistList[Vershina][i].first], DistList[Vershina][i].first});
            }
            /*
            std::cout << Vershina << ' ' << DistList[Vershina][i].first << ": \n";
            for (auto d : dist) {
                std::cout << d << " ";
            }
            std::cout << '\n' << "------------------" << '\n';
            */
        }
    }
}
